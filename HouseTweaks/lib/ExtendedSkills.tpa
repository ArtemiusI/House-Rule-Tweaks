//Here's a function for adding a new skill to the game. Feel free to put this function in your own mod.
DEFINE_ACTION_FUNCTION ADD_EXTENDED_SKILL
	INT_VAR
		stat=~-1~ //ID of the stat (either from STATS.IDS, or some big number if you're using an extended stat).
		name=~-1~ //Strref of the skill's name.
		description=~-1~ //Strref of the skill's description.
		opcode=401 //The opcode that will be used to modify the skill.
		visibility=1 //Whether the skill will appear alongside other skills in the character record screen.
						// 0: Always show
						// 1: Show if character can put points in skill
						// 2: Show if skill != 0
						// 3: Show if skill != 0 and character can put points in skill
						// 4: Don't show
	STR_VAR
		ids_name=~~
		class_include=~{}~ //A character with one of these classes (from CLASS.IDS) can put points in the skill.
		kit_include=~{}~ //A character with one of these kits can put points in the skill, even if their class is not in the "class_include" list.
		kit_exclude=~{}~ //A character with one of these kits cannot put points in the skill, even if their class is in the "class_include" list.
		stat_exclude=~{}~ //A character cannot put points in the skill if its stats meet any of these conditions.
							//Each stat condition is represented by an inner list with 3 numbers: the stat, a value, and a method of comparing the stat to the value.
							//The syntax is similar to a SPLPROT.2DA condition, and it accepts all the relations (0 - 11) that SPLPROT.2DA does.
							//For example, if you set stat_exclude to ~{{41, 12, 0}}~, a character cannot put points in the skill if their Constitution <= 12.
BEGIN
	ACTION_IF stat = (0 - 1) BEGIN
		FAIL ~ADD_EXTENDED_SKILL: You must choose a stat for the skill; otherwise the stat is -1, and that's not okay.~
	END
	ACTION_IF (~%ids_name%~ STRING_EQUAL_CASE ~~) AND stat > 202 BEGIN
		FAIL ~ADD_EXTENDED_SKILL: You must choose an ids name for the skill.~
	END
	COPY_EXISTING ~m__skill.lua~ ~override~
		REPLACE_TEXTUALLY CASE_SENSITIVE ~extendedskilllist = {~ ~extendedskilllist = {
	{
		["stat"] = %stat%,
		["name"] = %name%,
		["description"] = %description%,
		["opcode"] = %opcode%,
		["visibility"] = %visibility%,
		["class_include"] = %class_include%,
		["kit_include"] = %kit_include%,
		["kit_exclude"] = %kit_exclude%,
		["stat_exclude"] = %stat_exclude%
	},~
	ACTION_IF NOT FILE_CONTAINS_EVALUATED (~STATS.ids~ ~[%MNL%%LNL%%WNL%]%stat%[ %TAB%]~) BEGIN
		COPY_EXISTING ~stats.ids~ ~override~
			COUNT_2DA_ROWS 2 numrows
			READ_2DA_ENTRIES_NOW ~statsids~ 2
			READ_2DA_ENTRY_FORMER ~statsids~ (numrows - 1) 0 thelastid
			PATCH_IF stat > thelastid BEGIN
				INSERT_2DA_ROW numrows 2 ~%stat% %ids_name%~
			END ELSE BEGIN
				READ_2DA_ENTRY_FORMER ~statsids~ 0 0 thecurrentid
				FOR (i = 1; i < numrows; ++i) BEGIN
					thepreviousid = thecurrentid
					READ_2DA_ENTRY_FORMER ~statsids~ i 0 thecurrentid
					PATCH_IF stat > thepreviousid AND stat < thecurrentid BEGIN
						INSERT_2DA_ROW i 2 ~%stat% %ids_name%~
						i = numrows
					END
				END
			END
	END
END
//To add the example skill shown in M__SKILL.LUA, you'd do this:
/* LAF ADD_EXTENDED_SKILL
INT_VAR
	stat = 25 //Lore
	name = RESOLVE_STR_REF(~Lore~)
	description = RESOLVE_STR_REF(~LORE: The character's lore determines <PRO_HISHER> ability to identify the properties of magic items.~)
	opcode = 21 //Modify Lore
	visibility = 4 //Will not appear in character record screen (Lore's already there)
STR_VAR
	class_include = ~{4, 9, 10, 13, 15}~ //Usable by thief, fighter/thief, fighter/mage/thief, mage/thief, and cleric/thief
	kit_include = ~{0x4008}~ //Usable by stalker as well
	kit_exclude = ~{0x400C, 0x4021}~ //Not usable by swashbuckler or shadowdancer
	stat_exclude = ~{{38, 16, 2}, {39, 14, 2}}~ //Not usable if your Intelligence is less than 16 or your Wisdom is less than 14
END
*/


//Patch function that replaces set or all occurrences of the given regexp pattern in the file with the given string.
//Use EVAL to perform variable substitution on the string and/or the regexp pattern.
//Unlike REPLACE_TEXTUALLY the pattern can be multi-line text, even without using regexp.
//Just like REPLACE_BCS_BLOCK the function ignores pattern whitespace.
//The function can be also used as a COUNT_REGEXP_INSTANCES alternative with the above mentioned features.
//Optional PATCH_WARN message is printed if the task could not be performed (pattern not found or different amount of pattern matches than expected).

DEFINE_PATCH_FUNCTION REPLACE_MULTILINE //By K4thos
	INT_VAR
		num = "-1"     //amount of times the pattern should be replaced with string (-1 by default which is at least 1 but without max limit)
		strict = 0     //set to 1 to enable strict checking (auto escapes $^.*+?[]\ special characters)
		verbose = 1    //set to 0 to skip printing patching message
		warn = 1       //set to 0 to skip printing warning message if the function can't do what you ask it to do
		only_count = 0 //set to to 1 to skip pattern replacing and just return num_matches (COUNT_REGEXP_INSTANCES alternative)
	STR_VAR
		pattern = ""   //pattern that you want to replace
		string = ""    //string that the pattern will be replaced with
	RET
		num_matches    //amount of times the pattern has been found
	BEGIN
	TEXT_SPRINT percent ~%~
	INNER_PATCH_SAVE textToReplace ~%pattern%~ BEGIN
		PATCH_IF strict = 1 BEGIN
			REPLACE_TEXTUALLY ~\\~ ~\\\\~
			REPLACE_TEXTUALLY ~\[~ ~\[~
			REPLACE_TEXTUALLY ~\]~ ~\]~
			REPLACE_EVALUATE ~\([\$\^\.\*\+\?]\)~ BEGIN END ~\%MATCH1%~
		END
		REPLACE_TEXTUALLY ~[%WNL%%LNL%%MNL%%TAB% ]+~ ~[%WNL%%LNL%%MNL%%TAB% ]+~
	END
	SET num_matches = 0
	PATCH_IF only_count = 0 BEGIN
		REPLACE_EVALUATE CASE_INSENSITIVE ~%textToReplace%~ BEGIN
			SET num_matches = num_matches + 1
			INNER_PATCH_SAVE string ~%string%~ BEGIN
				REPLACE_TEXTUALLY ~%percent%MATCH\([0-9]+\)%percent%~ ~%MATCH\1%~
			END
		END ~%string%~
		SET warned = 0
		PATCH_IF num_matches != num BEGIN
			PATCH_IF num_matches = 0 BEGIN
				PATCH_IF warn = 1 BEGIN
					PATCH_WARN ~WARNING %SOURCE_FILESPEC% - pattern not found:%LNL%%pattern%~
				END
				SET warned = 1
			END ELSE PATCH_IF num >= 0 AND (num_matches > num OR num_matches < num) BEGIN
				PATCH_IF warn = 1 BEGIN
					PATCH_WARN ~WARNING %SOURCE_FILESPEC% - pattern replaced %num_matches% time(s) instead of %num%:%LNL%%pattern%~
				END
				SET warned = 1
			END
		END
		PATCH_IF verbose = 1 AND warned = 0 BEGIN
//			PATCH_PRINT ~Patching %SOURCE_FILESPEC% - pattern replaced %num_matches% time(s):%LNL%%pattern% => %string%~
			PATCH_PRINT ~Patching %SOURCE_FILESPEC% - pattern replaced %num_matches% time(s):%LNL%%pattern%~
		END
	END ELSE BEGIN
		COUNT_REGEXP_INSTANCES ~%textToReplace%~ num_matches
	END
END

COPY ~%MOD_FOLDER%/m__skill.lua~ ~override~

/*
The patches to UI.MENU are done in an awkward way. Basically, at the point in UI.MENU where I
want to insert some code, I see if there is a line of code that doesn't exist anywhere else in
the file. The patch replaces that line with itself and my own code. If another UI mod adds copies
of the line I replace, that mod might conflict with this one.
*/
COPY_EXISTING ~ui.menu~ ~override~
	SPRINT aiscriptstring ~oogleblah~
	SPRINT turnundeadstring ~oogleblah~
	SPRINT backstabmultiplierstring ~oogleblah~
	SPRINT racialenemystring ~oogleblah~
	TEXT_SPRINT donebuttonstring ~oogleblah~
	PATCH_IF GAME_IS ~bgee~ BEGIN
		SPRINT aiscriptstring ~AI Script~
		SPRINT turnundeadstring ~Turn Undead Level~
		SPRINT backstabmultiplierstring ~Backstab Multiplier~
		SPRINT racialenemystring ~Racial Enemy~
		PATCH_IF GAME_INCLUDES ~sod~ BEGIN
			TEXT_SPRINT donebuttonstring ~area 762 704 230 40~
		END ELSE BEGIN
			TEXT_SPRINT donebuttonstring ~HIGH_LEVEL_ABILITIES_BUTTON~
		END
	END
	PATCH_IF GAME_IS ~bg2ee eet~ BEGIN
		SPRINT aiscriptstring ~AI Script~
		SPRINT turnundeadstring ~Turn Undead Level~
		SPRINT backstabmultiplierstring ~Backstab Damage~
		SPRINT racialenemystring ~Racial Enemy~
		TEXT_SPRINT donebuttonstring ~area 360 70 302 44~
	END
	PATCH_IF GAME_IS ~iwdee~ BEGIN
		SPRINT aiscriptstring ~Current Script~
		SPRINT turnundeadstring ~Turn Undead Level~
		SPRINT backstabmultiplierstring ~Backstab Damage~
		SPRINT racialenemystring ~Racial Enemy~
		TEXT_SPRINT donebuttonstring ~area 762 704 230 44~
		TEXT_SPRINT donebuttonstring2 ~area 440 654 234 46~
	END
	TEXT_SPRINT plusminustruestring ~true~
	TEXT_SPRINT plusminusfalsestring ~false~
	PATCH_IF MOD_IS_INSTALLED ~LeUI.tp2~ ~0~ BEGIN
		PATCH_IF MOD_IS_INSTALLED ~LeUI.tp2~ ~4~ BEGIN
			TEXT_SPRINT plusminustruestring ~reverseButtonPosition~
			TEXT_SPRINT plusminusfalsestring ~not reverseButtonPosition~
		END ELSE BEGIN
			TEXT_SPRINT plusminustruestring ~not reverseButtonPosition~
			TEXT_SPRINT plusminusfalsestring ~reverseButtonPosition~
		END
	END
	PATCH_IF !(MOD_IS_INSTALLED ~dragonspear_ui++.tp2~ ~1~) AND !(MOD_IS_INSTALLED ~LeUI.tp2~ ~0~) AND !(MOD_IS_INSTALLED ~infinity_ui.tp2~ ~0~) AND !(FILE_EXISTS_IN_GAME ~GUICHP8A.PNG~) BEGIN
		LPF REPLACE_MULTILINE STR_VAR pattern=~helpTextString = characters\[currentID\]\.proficiencies\.details~ string= EVAL ~~~~~helpTextString = characters[currentID].proficiencies.details
		local gsubBase = "%aiscriptstring%:"
		if string.find(helpTextString, "%turnundeadstring%:") ~= nil then
			gsubBase = "%turnundeadstring%:"
		end
		if string.find(helpTextString, "%backstabmultiplierstring%:") ~= nil then
			gsubBase = "%backstabmultiplierstring%:"
		end
		if string.find(helpTextString, "%racialenemystring%:") ~= nil then
			gsubBase = "%racialenemystring%:"
		end
		local currentObject = EEex_GameObject_Get(currentID)
		for i = 1, #extendedskilllist, 1 do
			local skill = extendedskilllist[i]
			local skillValue = EEex_Sprite_GetAnyStat(currentObject, skill.stat)
			local visibility = skill.visibility
			local skillVisible = true
			if bit32.band(visibility, 0x4) > 0 then
				skillVisible = false
			end
			if bit32.band(visibility, 0x2) > 0 and skillValue == 0 then
				skillVisible = false
			end
			if bit32.band(visibility, 0x1) > 0 and not canUseExtendedSkill(currentObject, skill) then
				skillVisible = false
			end
			if string.find(helpTextString, Infinity_FetchString(skill.name) .. ": " .. skillValue) ~= nil then
				skillVisible = false
			end
			if skillVisible then
				helpTextString = string.gsub(helpTextString, gsubBase, Infinity_FetchString(skill.name) .. ": " .. skillValue .. "\n" .. gsubBase)
			end
		end~~~~~ END
	END
	LPF REPLACE_MULTILINE STR_VAR pattern=~for k, v in ipairs(characters\[currentID\]\.proficiencies\.class_skills) do~ string= EVAL ~local skillInsertPoint = #characters[currentID].proficiencies.class_skills + 1
		for i = #characters[currentID].proficiencies.class_skills, 1, -1 do
			local skillName = Infinity_FetchString(characters[currentID].proficiencies.class_skills[i].strRef)
			if skillName == "%turnundeadstring%" or skillName == "%backstabmultiplierstring%" or skillName == "%racialenemystring%" then
				 skillInsertPoint = i
			end
		end
		local currentObject = EEex_GameObject_Get(currentID)
		for i = 1, #extendedskilllist, 1 do
			local skill = extendedskilllist[i]
			local skillValue = EEex_Sprite_GetAnyStat(currentObject, skill.stat)
			local visibility = skill.visibility
			local skillVisible = true
			if bit32.band(visibility, 0x4) > 0 then
				skillVisible = false
			end
			if bit32.band(visibility, 0x2) > 0 and skillValue == 0 then
				skillVisible = false
			end
			if bit32.band(visibility, 0x1) > 0 and not canUseExtendedSkill(currentObject, skill) then
				skillVisible = false
			end
			for k, v in ipairs(characters[currentID].proficiencies.class_skills) do
				if v.strRef == skill.name then
					skillVisible = false
				end
			end
			if skillVisible then
				table.insert(characters[currentID].proficiencies.class_skills, skillInsertPoint, {['strRef'] = skill.name, ['current'] = skillValue})
				skillInsertPoint = skillInsertPoint + 1
			end
		end
		for k, v in ipairs(characters[currentID].proficiencies.class_skills) do~ END

	LPF REPLACE_MULTILINE STR_VAR pattern=~--reload language~ string=~~~~~--reload language

function EEex_Sprite_GetAnyStat(sprite, statID)
	if statID < EEex_Stats_FirstExtendedStatID then
		return EEex_Sprite_GetStat(sprite, statID)
	else
		return EEex_Sprite_GetExtendedStat(sprite, statID)
	end
end

function canUseExtendedSkill(sprite, skill)
	local canUseSkill = false
	local class = sprite.m_typeAI.m_Class
	local kit = EEex_Sprite_GetAnyStat(sprite, 152)
	for j = 1, #skill['class_include'], 1 do
		if skill['class_include'][j] == class then
			canUseSkill = true
		end
	end
	for j = 1, #skill['kit_include'], 1 do
		if skill['kit_include'][j] == kit then
			canUseSkill = true
		end
	end
	for j = 1, #skill['kit_exclude'], 1 do
		if skill['kit_exclude'][j] == kit then
			canUseSkill = false
		end
	end
	for j = 1, #skill['stat_exclude'], 1 do
		local check_stat = EEex_Sprite_GetAnyStat(sprite, skill['stat_exclude'][j][1])
		local check_value = skill['stat_exclude'][j][2]
		local check_relation = skill['stat_exclude'][j][3]
		if check_relation == 0 and check_stat <= check_value then
			canUseSkill = false
		elseif check_relation == 1 and check_stat == check_value then
			canUseSkill = false
		elseif check_relation == 2 and check_stat < check_value then
			canUseSkill = false
		elseif check_relation == 3 and check_stat > check_value then
			canUseSkill = false
		elseif check_relation == 4 and check_stat >= check_value then
			canUseSkill = false
		elseif check_relation == 5 and check_stat ~= check_value then
			canUseSkill = false
		elseif check_relation == 6 and bit32.bor(check_stat, check_value) == check_value then
			canUseSkill = false
		elseif check_relation == 7 and bit32.band(check_stat, check_value) >= check_value then
			canUseSkill = false
		elseif check_relation == 8 and bit32.band(check_stat, check_value) > 0 then
			canUseSkill = false
		elseif check_relation == 9 and bit32.band(check_stat, check_value) == 0 then
			canUseSkill = false
		elseif check_relation == 10 and bit32.bor(check_stat, check_value) > check_value then
			canUseSkill = false
		elseif check_relation == 11 and bit32.band(check_stat, check_value) < check_value then
			canUseSkill = false
		end
	end
	return canUseSkill
end

function displayExtendedSkills()
	if firstExtendedSkillIndex ~= nil then
		for i = 1, #extendedSkills, 1 do
			local skill = extendedSkills[i]
			chargen.thief_skill[firstExtendedSkillIndex + i] = {['description'] = skill.description, ['name'] = skill.name, ['value'] = skill.value, ['id'] = firstExtendedSkillIndex + i - 1}
		end
	end
end
~~~~~ END

	PATCH_IF !(GAME_IS ~iwdee~) BEGIN
		LPF REPLACE_MULTILINE STR_VAR pattern=~name [\'\"]CHARGEN_PROFICIENCIES[\'\"]\([^`]*\)[oO]n[oO]pen\([^\"]*\)\"~ string=~name 'CHARGEN_PROFICIENCIES'\1onopen\2"
	firstExtendedSkillIndex = #chargen.thief_skill
	extendedSkills = {}
	local currentObject = EEex_GameObject_Get(currentID)
	for i = 1, #extendedskilllist, 1 do
		local skill = extendedskilllist[i]
		if canUseExtendedSkill(currentObject, skill) then
			table.insert(extendedSkills, {['description'] = skill['description'], ['name'] = skill['name'], ['stat'] = skill['stat'], ['value'] = EEex_Sprite_GetAnyStat(currentObject, skill['stat']), ['base'] = EEex_Sprite_GetAnyStat(currentObject, skill['stat']), ['opcode'] = skill['opcode'],})
		end
	end

	displayExtendedSkills()
~ END

	END ELSE BEGIN
		LPF REPLACE_MULTILINE STR_VAR pattern=~name [\'\"]CHARGEN_SKILLS[\'\"]\([^\"]*\)\"~ string=~name 'CHARGEN_SKILLS'\1"
	firstExtendedSkillIndex = #chargen.thief_skill
	extendedSkills = {}
	local currentObject = EEex_GameObject_Get(currentID)
	for i = 1, #extendedskilllist, 1 do
		local skill = extendedskilllist[i]
		if canUseExtendedSkill(currentObject, skill) then
			table.insert(extendedSkills, {['description'] = skill['description'], ['name'] = skill['name'], ['stat'] = skill['stat'], ['value'] = EEex_Sprite_GetAnyStat(currentObject, skill['stat']), ['base'] = EEex_Sprite_GetAnyStat(currentObject, skill['stat']), ['opcode'] = skill['opcode'],})
		end
	end

	displayExtendedSkills()
~ END

		LPF REPLACE_MULTILINE STR_VAR pattern=~name [\'\"]LEVELUP_PROFICIENCIES[\'\"]\([^`]*\)[oO]n[oO]pen\([^\"]*\)\"~ string=~name 'LEVELUP_PROFICIENCIES'\1onopen\2"
	firstExtendedSkillIndex = #chargen.thief_skill
	extendedSkills = {}
	local currentObject = EEex_GameObject_Get(currentID)
	for i = 1, #extendedskilllist, 1 do
		local skill = extendedskilllist[i]
		if canUseExtendedSkill(currentObject, skill) then
			table.insert(extendedSkills, {['description'] = skill['description'], ['name'] = skill['name'], ['stat'] = skill['stat'], ['value'] = EEex_Sprite_GetAnyStat(currentObject, skill['stat']), ['base'] = EEex_Sprite_GetAnyStat(currentObject, skill['stat']), ['opcode'] = skill['opcode'],})
		end
	end

	displayExtendedSkills()
~ END
	END
	PATCH_IF !(MOD_IS_INSTALLED ~LeUI.tp2~ ~0~) BEGIN
		LPF REPLACE_MULTILINE STR_VAR pattern=~createCharScreen:OnProficiencyPlusMinusButtonClick(chargen\.proficiency\[currentChargenProficiency\]\.id, %plusminustruestring%)~ string=~createCharScreen:OnProficiencyPlusMinusButtonClick(chargen.proficiency[currentChargenProficiency].id, %plusminustruestring%)
					displayExtendedSkills()~ END

		LPF REPLACE_MULTILINE STR_VAR pattern=~createCharScreen:OnProficiencyPlusMinusButtonClick(chargen\.proficiency\[currentChargenProficiency\]\.id, %plusminusfalsestring%)~ string=~createCharScreen:OnProficiencyPlusMinusButtonClick(chargen.proficiency[currentChargenProficiency].id, %plusminusfalsestring%)
					displayExtendedSkills()~ END
	END ELSE BEGIN
		LPF REPLACE_MULTILINE STR_VAR pattern=~createCharScreen:OnProficiencyPlusMinusButtonClick(allChargenProficiencies\[currentChargenProficiency\]\.id, %plusminustruestring%)~ string=~createCharScreen:OnProficiencyPlusMinusButtonClick(chargen.proficiency[currentChargenProficiency].id, %plusminustruestring%)
					displayExtendedSkills()~ END

		LPF REPLACE_MULTILINE STR_VAR pattern=~createCharScreen:OnProficiencyPlusMinusButtonClick(allChargenProficiencies\[currentChargenProficiency\]\.id, %plusminusfalsestring%)~ string=~createCharScreen:OnProficiencyPlusMinusButtonClick(chargen.proficiency[currentChargenProficiency].id, %plusminusfalsestring%)
					displayExtendedSkills()~ END
	END

	LPF REPLACE_MULTILINE STR_VAR pattern=~if createCharScreen:IsThiefSkillPlusMinusButtonClickable() then~ string=~if createCharScreen:IsThiefSkillPlusMinusButtonClickable() then
					exIndex = currentChargenThiefSkill - firstExtendedSkillIndex~ END

	LPF REPLACE_MULTILINE STR_VAR pattern=~createCharScreen:OnThiefSkillPlusMinusButtonClick(chargen\.thief_skill\[currentChargenThiefSkill\]\.id, %plusminustruestring%)~ string=~						if currentChargenThiefSkill > firstExtendedSkillIndex then
								if chargen.thief_skill[currentChargenThiefSkill].value < 255 and chargen.extraSkillPoints > 0 then
									chargen.thief_skill[currentChargenThiefSkill].value = chargen.thief_skill[currentChargenThiefSkill].value + 1
									extendedSkills[exIndex].value = extendedSkills[exIndex].value + 1
									chargen.extraSkillPoints = chargen.extraSkillPoints - 1
								end
							end
							createCharScreen:OnThiefSkillPlusMinusButtonClick(chargen.thief_skill[currentChargenThiefSkill].id, %plusminustruestring%)
							displayExtendedSkills()~ END

	LPF REPLACE_MULTILINE STR_VAR pattern=~createCharScreen:OnThiefSkillPlusMinusButtonClick(chargen\.thief_skill\[currentChargenThiefSkill\]\.id, %plusminusfalsestring%)~ string=~						if currentChargenThiefSkill > firstExtendedSkillIndex then
							if chargen.levelingUp and chargen.thief_skill[currentChargenThiefSkill].value > extendedSkills[exIndex].base then
								chargen.thief_skill[currentChargenThiefSkill].value = chargen.thief_skill[currentChargenThiefSkill].value - 1
								extendedSkills[exIndex].value = extendedSkills[exIndex].value - 1
								chargen.extraSkillPoints = chargen.extraSkillPoints + 1
								createCharScreen:OnThiefSkillPlusMinusButtonClick(chargen.thief_skill[currentChargenThiefSkill].id, %plusminusfalsestring%)
								displayExtendedSkills()
							end
						else
							createCharScreen:OnThiefSkillPlusMinusButtonClick(chargen.thief_skill[currentChargenThiefSkill].id, %plusminusfalsestring%)
							displayExtendedSkills()
						end~ END

	PATCH_IF !(GAME_IS ~iwdee~) BEGIN
		LPF REPLACE_MULTILINE STR_VAR pattern= EVAL ~name [\'\"]CHARGEN_PROFICIENCIES[\'\"]\([^`]*\)createCharScreen:OnDoneButtonClick()~ string= EVAL ~~~~~name 'CHARGEN_PROFICIENCIES'\1

		for i = 1, #extendedSkills, 1 do
			local skill = extendedSkills[i]
			extendedSkillIncrement = skill.value - skill.base
			if extendedSkillIncrement ~= 0 then
				local currentObject = EEex_GameObject_Get(currentID)
				EEex_GameObject_ApplyEffect(currentObject, {
['effectID'] = skill.opcode,
['targetType'] = 1,
['durationType'] = 9,
['effectAmount'] = extendedSkillIncrement,
['special'] = skill.stat,
['sourceTarget'] = currentID,
['sourceID'] = currentID,
['effectList'] = 1,
})
			end
		end
		createCharScreen:OnDoneButtonClick()~~~~~ END
/*
	LPF REPLACE_MULTILINE STR_VAR pattern= EVAL ~%donebuttonstring%\([^`]*\)createCharScreen:OnDoneButtonClick()~ string= EVAL ~~~~~%donebuttonstring%\1

		for i = 1, #extendedSkills, 1 do
			local skill = extendedSkills[i]
			extendedSkillIncrement = skill.value - skill.base
			if extendedSkillIncrement ~= 0 then
				local currentObject = EEex_GameObject_Get(currentID)
				EEex_GameObject_ApplyEffect(currentObject, {
['effectID'] = skill.opcode,
['targetType'] = 1,
['durationType'] = 9,
['effectAmount'] = extendedSkillIncrement,
['special'] = skill.stat,
['sourceTarget'] = currentID,
['sourceID'] = currentID,
['effectList'] = 1,
})
			end
		end
		createCharScreen:OnDoneButtonClick()~~~~~ END
*/

	END ELSE BEGIN
/*
		LPF REPLACE_MULTILINE STR_VAR pattern= EVAL ~name [\'\"]CHARGEN_SKILLS[\'\"]\([^`]*\)createCharScreen:OnDoneButtonClick()~ string= EVAL ~~~~~name 'CHARGEN_SKILLS'\1

		for i = 1, #extendedSkills, 1 do
			local skill = extendedSkills[i]
			extendedSkillIncrement = skill.value - skill.base
			if extendedSkillIncrement ~= 0 then
				local currentObject = EEex_GameObject_Get(currentID)
				EEex_GameObject_ApplyEffect(currentObject, {
['effectID'] = skill.opcode,
['targetType'] = 1,
['durationType'] = 9,
['effectAmount'] = extendedSkillIncrement,
['special'] = skill.stat,
['sourceTarget'] = currentID,
['sourceID'] = currentID,
['effectList'] = 1,
})
			end
		end
		createCharScreen:OnDoneButtonClick()~~~~~ END
*/
		LPF REPLACE_MULTILINE STR_VAR pattern= EVAL ~name [\'\"]LEVELUP_PROFICIENCIES[\'\"]\([^`]*\)createCharScreen:OnDoneButtonClick()~ string= EVAL ~~~~~name 'LEVELUP_PROFICIENCIES'\1

		for i = 1, #extendedSkills, 1 do
			local skill = extendedSkills[i]
			extendedSkillIncrement = skill.value - skill.base
			if extendedSkillIncrement ~= 0 then
				local currentObject = EEex_GameObject_Get(currentID)
				EEex_GameObject_ApplyEffect(currentObject, {
['effectID'] = skill.opcode,
['targetType'] = 1,
['durationType'] = 9,
['effectAmount'] = extendedSkillIncrement,
['special'] = skill.stat,
['sourceTarget'] = currentID,
['sourceID'] = currentID,
['effectList'] = 1,
})
			end
		end
		createCharScreen:OnDoneButtonClick()~~~~~ END



		LPF REPLACE_MULTILINE STR_VAR pattern= EVAL ~%donebuttonstring2%\([^`]*\)createCharScreen:OnDoneButtonClick();~ string= EVAL ~~~~~%donebuttonstring2%\1

		for i = 1, #extendedSkills, 1 do
			local skill = extendedSkills[i]
			extendedSkillIncrement = skill.value - skill.base
			if extendedSkillIncrement ~= 0 then
				local currentObject = EEex_GameObject_Get(currentID)
				EEex_GameObject_ApplyEffect(currentObject, {
['effectID'] = skill.opcode,
['targetType'] = 1,
['durationType'] = 9,
['effectAmount'] = extendedSkillIncrement,
['special'] = skill.stat,
['sourceTarget'] = currentID,
['sourceID'] = currentID,
['effectList'] = 1,
})
			end
		end
		createCharScreen:OnDoneButtonClick();~~~~~ END

	END
/*
	REPLACE_EVALUATE ~createCharScreen:OnHighLevelAbilitiesButtonClick()~
	BEGIN
	END
		~~~~~for i = 1, #extendedSkills, 1 do
			local skill = extendedSkills[i]
			extendedSkillIncrement = skill.value - skill.base
			if extendedSkillIncrement ~= 0 then
				local currentObject = EEex_GameObject_Get(currentID)
				EEex_GameObject_ApplyEffect(currentObject, {
['effectID'] = skill.opcode,
['targetType'] = 1,
['durationType'] = 9,
['effectAmount'] = extendedSkillIncrement,
['special'] = skill.stat,
['sourceTarget'] = currentID,
['sourceID'] = currentID,
['effectList'] = 1,
})
			end
		end
		createCharScreen:OnHighLevelAbilitiesButtonClick()~~~~~
*/

	PATCH_IF (GAME_IS ~bg2ee eet~) AND (MOD_IS_INSTALLED ~LeUI.tp2~ ~0~) BEGIN
		LPF REPLACE_MULTILINE STR_VAR pattern= EVAL ~createCharScreen:OnHighLevelAbilitiesButtonClick()~ string= EVAL ~~~~~
		for i = 1, #extendedSkills, 1 do
			local skill = extendedSkills[i]
			extendedSkillIncrement = skill.value - skill.base
			if extendedSkillIncrement ~= 0 then
				local currentObject = EEex_GameObject_Get(currentID)
				EEex_GameObject_ApplyEffect(currentObject, {
['effectID'] = skill.opcode,
['targetType'] = 1,
['durationType'] = 9,
['effectAmount'] = extendedSkillIncrement,
['special'] = skill.stat,
['sourceTarget'] = currentID,
['sourceID'] = currentID,
['effectList'] = 1,
})
			end
		end
		createCharScreen:OnHighLevelAbilitiesButtonClick()~~~~~ END
	END